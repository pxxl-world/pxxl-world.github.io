// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { Action } from "./action_reducer.ts";
export { Action };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { Spawn } from "./spawn_reducer.ts";
export { Spawn };

// Import and reexport all table handle types
import { PersonTableHandle } from "./person_table.ts";
export { PersonTableHandle };
import { TileTableHandle } from "./tile_table.ts";
export { TileTableHandle };

// Import and reexport all types
import { ActionType } from "./action_type_type.ts";
export { ActionType };
import { GameAction } from "./game_action_type.ts";
export { GameAction };
import { Person } from "./person_type.ts";
export { Person };
import { PutAction } from "./put_action_type.ts";
export { PutAction };
import { Tile } from "./tile_type.ts";
export { Tile };

const REMOTE_MODULE = {
  tables: {
    person: {
      tableName: "person",
      rowType: Person.getTypeScriptAlgebraicType(),
      primaryKey: "conn",
      primaryKeyInfo: {
        colName: "conn",
        colType: Person.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    tile: {
      tableName: "tile",
      rowType: Tile.getTypeScriptAlgebraicType(),
      primaryKey: "pos",
      primaryKeyInfo: {
        colName: "pos",
        colType: Tile.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    action: {
      reducerName: "action",
      argsType: Action.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    spawn: {
      reducerName: "spawn",
      argsType: Spawn.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.2.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "Action", args: Action }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "Spawn", args: Spawn }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  action(action: GameAction) {
    const __args = { action };
    let __writer = new BinaryWriter(1024);
    Action.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("action", __argsBuffer, this.setCallReducerFlags.actionFlags);
  }

  onAction(callback: (ctx: ReducerEventContext, action: GameAction) => void) {
    this.connection.onReducer("action", callback);
  }

  removeOnAction(callback: (ctx: ReducerEventContext, action: GameAction) => void) {
    this.connection.offReducer("action", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  spawn() {
    this.connection.callReducer("spawn", new Uint8Array(0), this.setCallReducerFlags.spawnFlags);
  }

  onSpawn(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("spawn", callback);
  }

  removeOnSpawn(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("spawn", callback);
  }

}

export class SetReducerFlags {
  actionFlags: CallReducerFlags = 'FullUpdate';
  action(flags: CallReducerFlags) {
    this.actionFlags = flags;
  }

  spawnFlags: CallReducerFlags = 'FullUpdate';
  spawn(flags: CallReducerFlags) {
    this.spawnFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get person(): PersonTableHandle {
    return new PersonTableHandle(this.connection.clientCache.getOrCreateTable<Person>(REMOTE_MODULE.tables.person));
  }

  get tile(): TileTableHandle {
    return new TileTableHandle(this.connection.clientCache.getOrCreateTable<Tile>(REMOTE_MODULE.tables.tile));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
